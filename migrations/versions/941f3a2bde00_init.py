"""init

Revision ID: 941f3a2bde00
Revises: 
Create Date: 2023-04-30 18:37:54.905052

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "941f3a2bde00"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "city",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "restaurant",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("image", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("salt", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "restaurant__city",
        sa.Column("restaurant_id", sa.Integer(), nullable=False),
        sa.Column("city_id", sa.Integer(), nullable=False),
        sa.Column("opening_time", sa.Time(), nullable=False),
        sa.Column("closing_time", sa.Time(), nullable=False),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
        sa.PrimaryKeyConstraint("restaurant_id", "city_id"),
        sa.UniqueConstraint("restaurant_id", "city_id", name="restaurant__city__uc"),
    )
    op.create_index(
        op.f("ix_restaurant__city_city_id"),
        "restaurant__city",
        ["city_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_restaurant__city_restaurant_id"),
        "restaurant__city",
        ["restaurant_id"],
        unique=False,
    )
    op.create_table(
        "restaurant_category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("restaurant_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
            name="category_restaurant_fk",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "restaurant_id"),
    )
    op.create_index(
        op.f("ix_restaurant_category_restaurant_id"),
        "restaurant_category",
        ["restaurant_id"],
        unique=False,
    )
    op.create_table(
        "user",
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("city_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("hashed_password", sa.String(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("salt", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["city.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index(op.f("ix_user_city_id"), "user", ["city_id"], unique=False)
    op.create_table(
        "dish",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("image", sa.String(), nullable=False),
        sa.Column("price", sa.Float(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("restaurant_id", sa.Integer(), nullable=False),
        sa.Column("category_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["restaurant_category.id"],
            name="dish_category_fk",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name", "restaurant_id", name="name_restaurant_uc"),
    )
    op.create_index(op.f("ix_dish_category_id"), "dish", ["category_id"], unique=False)
    op.create_index(
        op.f("ix_dish_restaurant_id"), "dish", ["restaurant_id"], unique=False
    )
    op.create_table(
        "favorite_restaurant",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("restaurant_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["restaurant_id"], ["restaurant.id"], name="fk_restaurant_id"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="fk_user_id"),
        sa.PrimaryKeyConstraint("user_id", "restaurant_id"),
        sa.UniqueConstraint("user_id", "restaurant_id", name="user__restaurant_uc"),
    )
    op.create_table(
        "order",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "time", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "COOKING", "DELIVERED", "COMPLETED", name="orderstatus"),
            nullable=False,
        ),
        sa.Column("delivery_address", sa.String(), nullable=False),
        sa.Column("restaurant_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
        sa.ForeignKeyConstraint(
            ["restaurant_id"],
            ["restaurant.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_order_restaurant_id"), "order", ["restaurant_id"], unique=False
    )
    op.create_index(op.f("ix_order_user_id"), "order", ["user_id"], unique=False)
    op.create_table(
        "order__dish",
        sa.Column("order_id", sa.Integer(), nullable=False),
        sa.Column("dish_id", sa.Integer(), nullable=False),
        sa.Column("count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["dish_id"], ["dish.id"], name="order__dish_dish_id_fk", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["order_id"],
            ["order.id"],
            name="order__dish_order_id_fk",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("order_id", "dish_id"),
        sa.UniqueConstraint("order_id", "dish_id", name="order__dish_uc"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("order__dish")
    op.drop_index(op.f("ix_order_user_id"), table_name="order")
    op.drop_index(op.f("ix_order_restaurant_id"), table_name="order")
    op.drop_table("order")
    op.drop_table("favorite_restaurant")
    op.drop_index(op.f("ix_dish_restaurant_id"), table_name="dish")
    op.drop_index(op.f("ix_dish_category_id"), table_name="dish")
    op.drop_table("dish")
    op.drop_index(op.f("ix_user_city_id"), table_name="user")
    op.drop_table("user")
    op.drop_index(
        op.f("ix_restaurant_category_restaurant_id"), table_name="restaurant_category"
    )
    op.drop_table("restaurant_category")
    op.drop_index(
        op.f("ix_restaurant__city_restaurant_id"), table_name="restaurant__city"
    )
    op.drop_index(op.f("ix_restaurant__city_city_id"), table_name="restaurant__city")
    op.drop_table("restaurant__city")
    op.drop_table("restaurant")
    op.drop_table("city")

    op.execute("DROP TYPE orderstatus")

    # ### end Alembic commands ###
